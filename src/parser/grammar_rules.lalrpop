use std::str::FromStr;
use crate::ast;

grammar;

// Top-level rule of the grammar
// TODO: add actual arguments
pub Twoc : Vec<ast::Stmt> = {
    "twoc" "(" "string" ")" "{" <prog:StmtList> "}" => prog,
}

// Rule to parse lists of statements
// StmtList ::= Stmt ";" StmtList? | epsilon
pub StmtList : Vec<ast::Stmt> = {
    <stmts:Stmt*> => stmts
}

// Rule to parse statements
pub Stmt : ast::Stmt = {
    "accept" ";"
        => ast::Stmt::Accept(),

    "reject" ";"
        => ast::Stmt::Reject(),

    "move" "(" <s:r"-?[0-9]+"> ")" ";"
        => ast::Stmt::Move(i32::from_str(s).unwrap()),

    "c" "+=" <s:r"-?[0-9]+"> ";"
        => ast::Stmt::Incr(i32::from_str(s).unwrap()), 

    "c" "-=" <s:r"-?[0-9]+"> ";"
        => ast::Stmt::Incr(-1 * i32::from_str(s).unwrap()),

    "if" "(" <cond:Cond> ")" "{" <if_body:StmtList> "}" <else_body:ElseBody?>
        => match else_body {
            None => 
                ast::Stmt::If(cond, if_body, Vec::new()),
            Some(else_block) => 
                ast::Stmt::If(cond, if_body, else_block),
        },

    "while" "(" <cond:Cond> ")" "{" <while_body:StmtList> "}"
        => ast::Stmt::While(cond, while_body),

    "branch" "{" <branch_body:StmtList> "}" <mut alsos:AlsoBody+>
        => {
            alsos.insert(0, branch_body);
            ast::Stmt::Branch(alsos)
        }
}

// Rule to parse else statements
// TODO: extend for else-if statements
pub ElseBody : Vec<ast::Stmt> = {
    "else" "{" <else_body:StmtList> "}" 
        => else_body,
}

// Rule to parse also statements
pub AlsoBody : Vec<ast::Stmt> = {
    "also" "{" <also_body:StmtList> "}"
        => also_body,
}
 
// Rule to parse logical expressions
// Or binds the least tightly
pub Cond : ast::Cond = {
    <cond:AndCond> => cond,
    
    <cond:AndCond> "||" <conds:Cond>
        => ast::Cond::Or(Box::new(cond), Box::new(conds)),
}

// And binds tighter
pub AndCond : ast::Cond = {
    <cond:BaseCond> => cond,

    <cond:BaseCond> "&&" <conds:AndCond>
        => ast::Cond::And(Box::new(cond), Box::new(conds)),
}


// Base conditionals
pub BaseCond : ast::Cond = {
    "c" "==" "0"
        => ast::Cond::CheckZero(),

    "c" "!=" "0"
        => ast::Cond::CheckNotZero(),

    "read" "==" <read_char:r"'[a-zA-Z0-9]'">
        => {
            let read = ast::Readable::Char(read_char.chars().nth(1).unwrap());
            ast::Cond::Read(read)
        },

    "read" "!=" <read_char:r"'[a-zA-Z0-9]'">
        => {
            let read = ast::Readable::Char(read_char.chars().nth(1).unwrap());
            ast::Cond::NotRead(read)
        },

    "read" "==" <endmarker:r"(lend|rend)"> 
        => match endmarker {
            "lend" => ast::Cond::Read(ast::Readable::LEnd()),

            "rend" => ast::Cond::Read(ast::Readable::REnd()),

            _      => ast::Cond::Read(ast::Readable::LEnd()),
        }, 

    "read" "!=" <endmarker:r"(lend|rend)"> 
        => match endmarker {
            "lend" => ast::Cond::NotRead(ast::Readable::LEnd()),

            "rend" => ast::Cond::NotRead(ast::Readable::REnd()),

            _      => ast::Cond::NotRead(ast::Readable::LEnd()),
        }, 

    // ! binds tightest
    "!" <cond:BaseCond> => ast::Cond::Not(Box::new(cond)),

    "(" <cond:Cond> ")" => cond,
}


