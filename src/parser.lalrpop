use std::str::FromStr;
use crate::ast;

grammar;

// Top-level rule of the grammar
// TODO: add syntactic sugar
pub Twoc : Vec<ast::Stmt> = {
    "twoc" "(" "string" ")" "{" <prog:StmtList> "}" 
        => prog,
}

// Rule to parse lists of statements
// StmtList ::= Stmt ";" StmtList? | epsilon
pub StmtList : Vec<ast::Stmt> = {
    <stmts:Stmt*> 
        => stmts
}

// Rule to parse statements
pub Stmt : ast::Stmt = {
    "accept" ";"
        => ast::Stmt::Accept(),

    "reject" ";"
        => ast::Stmt::Reject(),

    "move(" <s:r"-?[0-9]+"> ")" ";"
        => ast::Stmt::Move(i32::from_str(s).unwrap()),

    "c" "+=" <s:r"-?[0-9]+"> ";"
        => ast::Stmt::Incr(i32::from_str(s).unwrap()), 

    "c" "-=" <s:r"-?[0-9]+"> ";"
        => ast::Stmt::Incr(-1 * i32::from_str(s).unwrap()),

    "if" "(" <cond:Cond> ")" "{" <if_body:StmtList> "}" <else_body:ElseBody?>
        => match else_body {
            None => 
                ast::Stmt::If(cond, if_body, Vec::new()),
            Some(else_block) => 
                ast::Stmt::If(cond, if_body, else_block),
        },

    "while" "(" <cond:Cond> ")" "{" <while_body:StmtList> "}"
        => ast::Stmt::While(cond, while_body),
}

// Rule to parse else statements
// TODO: extend for else-if statements
pub ElseBody : Vec<ast::Stmt> = {
    "else" "{" <else_body:StmtList> "}" 
        => else_body,
}

// Rule to parse logical 
// TODO: actually do this
pub Cond : ast::Cond = {
    "cond" => ast::Cond::CheckZero(),
}
