decr_on_zero = true;
alphabet = [ '0', '1' ];

twoc (int N, int M) {
    // accept if (N, M) in {(0, 1), (1, 2), (2, 4), (3, 8)}
    
    // (0, 1)
    c = N;
    if (c == 0) {
        c = M; c -= 1;
        if (c == 0) { accept; } else { reject; }
    } 
    
    else {
        // (1, 2)
        c = N; c -= 1;
        if (c == 0) {
            c = M; c -= 2;
            if (c == 0) { accept; } else { reject; }
        } 
        
        else {
            // (2, 4)
            c = N; c -= 2;
            if (c == 0) {
                c = M; c -= 4;
                if (c == 0) { accept; } else { reject; }
            } 
            
            else {
                // (3, 8)
                c = N; c -= 3;
                if (c == 0) {
                    c = M; c -= 8;
                    if (c == 0) { accept; } else { reject; }
                }
            }
        }
    }

    // reject if n<4
    c = N;
    repeat (4) {
        if (c == 0) { reject; }
        c--;
    }
    
    // reject if m<16
    c = M;
    repeat (16) {
        if (c == 0) { reject; }
        c--;
    }

    c = M;

    // while !odd(c) do c = c div 2;

    // goto lend
    while (read != lend) { move(-1); }

    while () {
        // Check if c is odd


        // goto index c on the tape
        while (c != 0) {
            move(1);
            c--;
        }

        // move back to lend and update c
        while (read != lend) {
            move(-1);
            if (read != lend) {
                move(-1);
                c++;
            }
        }
    }        

    // if (c>1) then reject
    c--;
    if (c != 0) { reject; }

    c = M;

    // c = c div 8;
    
    repeat (3) {
        while (read != lend) { move(-1); }

        while (c != 0) {
            move(1);
            c--;
        }

        while (read != lend) {
            move(-1);
            if (read != lend) {
                move(-1);
                c++;
            }
        }
    }

    while () {
        // c = c+M div 2
        c += M;
        while (c != 0) {
            move(1);
            c--;
        }

        while (read != lend) {
            move(-1);
            if (read != lend) {
                move(-1);
                c++;
            }
        }

        // while not odd(c) do c = c div 2;
        
        c += 2;

        // while 2*c < m do do c = c *2;
    }

    // c = c div 2
    while (read != lend) { move(-1); }

    while (c != 0) {
        move(1);
        c--;
    }

    while (read != lend) {
        move(-1);
        if (read != lend) {
            move(-1);
            c++;
        }
    }

    // if c + 3 = n then accept
    c = N;
    c -= 3;
    if (c == 0) { accept; }
}